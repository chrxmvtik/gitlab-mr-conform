# Default values for gitlab-mr-bot
replicaCount: 2

image:
  repository: ghcr.io/chrxmvtik/gitlab-mr-conform
  # tag: main
  pullPolicy: IfNotPresent

nameOverride: ""
fullnameOverride: ""

service:
  type: LoadBalancer
  port: 80
  targetPort: 8080

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: gitlab-mr-bot.local
      paths:
        - path: /webhook
          pathType: Prefix
  tls: []

route:
  main:
    # -- Enables or disables the route
    enabled: false

    # -- Set the route apiVersion, e.g. gateway.networking.k8s.io/v1 or gateway.networking.k8s.io/v1alpha2
    apiVersion: gateway.networking.k8s.io/v1
    # -- Set the route kind
    # Valid options are GRPCRoute, HTTPRoute, TCPRoute, TLSRoute, UDPRoute
    kind: HTTPRoute

    annotations: {}
    labels: {}

    hostnames:
      - my-filter.example.com
    parentRefs:
      - name: my-gateway
        namespace: my-gateway

    # -- create http route for redirect (https://gateway-api.sigs.k8s.io/guides/http-redirect-rewrite/#http-to-https-redirects)
    ## Take care that you only enable this on the http listener of the gateway to avoid an infinite redirect.
    ## matches, filters and additionalRules will be ignored if this is set to true. Be are s
    httpsRedirect: false

    matches:
      - path:
          type: PathPrefix
          value: /webhook

    ## Filters define the filters that are applied to requests that match this rule.
    filters: []

    ## Additional custom rules that can be added to the route
    additionalRules: []

resources:
  limits:
    cpu: 500m
    memory: 128Mi
  requests:
    cpu: 250m
    memory: 64Mi

livenessProbe:
  httpGet:
    path: /health
    port: 8080
  initialDelaySeconds: 30
  periodSeconds: 10

readinessProbe:
  httpGet:
    path: /health
    port: 8080
  initialDelaySeconds: 5
  periodSeconds: 5

nodeSelector: {}

tolerations: []

affinity: {}

# Environment variables prefixed with GITLAB_MR_BOT_, ie.:
#  GITLAB_MR_BOT_QUEUE_REDIS_HOST: "valkey.valkey:6379"
#  GITLAB_MR_BOT_QUEUE_REDIS_DATABASE: "0"

env: {}

# envFrom:
#   - secretRef:
#       name: mr-conform-secrets
# Example content:
# GITLAB_MR_BOT_GITLAB_TOKEN: "PAT"
# GITLAB_MR_BOT_GITLAB_SECRET_TOKEN: "WEBHOOKSECRET"
# GITLAB_MR_BOT_QUEUE_REDIS_PASSWORD: "REDISPASSWORD"

envFrom: []

# Secret configuration
secret:
  # Set to false if you want to use an existing secret
  create: true
  # Name of the secret (if create is false, this should be the existing secret name)
  # Keep in mind, that your own secret needs to match keys, which are:
  # gitlab-token, webhook-secret and redis-password.
  name: ""
  # Secret data (base64 encoded values)
  data:
    # Variables are optional, so you can skip for example redisPassword, if not used.
    gitlabToken: "" # base64 encoded GitLab token
    webhookSecret: "" # base64 encoded webhook secret
    redisPassword: "" # base64 encoded Redis password, if queue enabled

# Pod Security Context
podSecurityContext: {}

# Container Security Context
securityContext: {}

# Service Account
serviceAccount:
  create: false
  annotations: {}
  name: ""

# Pod annotations
podAnnotations: {}

# Pod labels
podLabels: {}

# Application configuration
config:
  # Set to false if you want to use an existing configmap
  create: true
  # Name of the configmap (if create is false, this should be the existing configmap name)
  name: ""
  # Configuration data
  data:
    server:
      port: 8080
      host: "0.0.0.0"
      log_level: info
    gitlab:
      # Note: GITLAB_MR_BOT_GITLAB_TOKEN and GITLAB_MR_BOT_GITLAB_SECRET_TOKEN
      # are set via environment variables from the secret
      base_url: "https://gitlab.com"
      insecure: false # defaults to false if not specified
    queue:
      enabled: false
      redis:
        host: "<your-redis-or-valkey-host>:6379"
        # Note: set using GITLAB_MR_BOT_QUEUE_REDIS_PASSWORD variable
        password: "redispassword"
        db: "0"
      queue:
        processing_interval: 100ms
        max_retries: 3
        lock_ttl: 10s
    rules:
      title:
        enabled: true
        min_length: 10
        max_length: 100
        conventional:
          types:
            - "feat"
            - "fix"
            - "docs"
            - "refactor"
            - "release"
          scopes:
            - ".*"
        forbidden_words:
          - "WIP"
          - "TODO"
          - "FIXME"
        jira:
          keys:
            - "PROJ"
            - "JIRA"
      description:
        enabled: true
        required: true
        min_length: 20
        require_template: false
      branch:
        enabled: true
        allowed_prefixes:
          - "feature/"
          - "bugfix/"
          - "hotfix/"
          - "release/"
        forbidden_names:
          - "master"
          - "main"
          - "develop"
          - "staging"
      commits:
        enabled: true
        max_length: 72
        conventional:
          types:
            - "feat"
            - "fix"
            - "docs"
            - "refactor"
            - "release"
          scopes:
            - ".*"
        jira:
          keys: []
      approvals:
        enabled: false
        use_codeowners: false
        min_count: 1
      squash:
        enabled: true
        enforce_branches:
          - "feature/*"
          - "fix/*"
        disallow_branches:
          - "release/*"
          - "hotfix/*"
