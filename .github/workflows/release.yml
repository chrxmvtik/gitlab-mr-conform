name: Release

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches:
      - release*

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  prepare:
    runs-on: gha-runner-scale-set
    permissions:
      contents: write
      packages: read
      id-token: write
    outputs:
      version: ${{ steps.version_step.outputs.semVer }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDK and enable cache
        uses: actions/setup-dotnet@v3
        env:
          DOTNET_INSTALL_DIR: ~/.dotnet
        with:
          dotnet-version: "8.0.x"

      - name: Setup gitversion
        uses: gittools/actions/gitversion/setup@v3.2.1
        with:
          versionSpec: "6.3.x"

      - name: Determine Version
        id: version_step # step id used as a reference for output values
        uses: gittools/actions/gitversion/execute@v3.2.1
        with:
          useConfigFile: true
          configFilePath: .github/GitVersion.yaml

      - name: Use version in subsequent steps
        run: |
          echo "Building version ${{ steps.version_step.outputs.semVer }}"
      - name: Install Updatecli in the runner
        uses: updatecli/updatecli-action@v2

      - name: Run Updatecli in Dry Run mode
        run: "updatecli diff --config .github/updatecli.yaml"
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.version_step.outputs.semVer }}
          BRANCH: ${{ github.ref_name }}
          OWNER: ${{ github.repository_owner }}
          REPOSITORY: "gitlab-mr-conform"

      - name: Run Updatecli in apply mode
        run: "updatecli apply --config .github/updatecli.yaml"
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.version_step.outputs.semVer }}
          BRANCH: ${{ github.ref_name }}
          OWNER: ${{ github.repository_owner }}
          REPOSITORY: "gitlab-mr-conform"

      - name: Generate changelog
        uses: orhun/git-cliff-action@v4
        id: changelog
        with:
          config: .github/cliff.toml
          args: --verbose --tag v$VERSION
        env:
          OUTPUT: CHANGELOG.md
          GITHUB_REPO: ${{ github.repository }}
          VERSION: ${{ steps.version_step.outputs.semVer }}

      - name: Commit
        env:
          VERSION: ${{ steps.version_step.outputs.semVer }}
        run: |
          git pull
          git checkout $GITHUB_REF_NAME
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          set +e
          git add CHANGELOG.md
          git commit -m "release(prepare, $VERSION): update changelog [skip ci]"
          git push https://${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git $GITHUB_REF_NAME

      - name: Generate release notes
        uses: orhun/git-cliff-action@v4
        id: release-notes
        with:
          config: .github/cliff.toml
          args: --verbose --unreleased --tag v$VERSION --strip header
        env:
          OUTPUT: RELEASE_NOTES.md
          GITHUB_REPO: ${{ github.repository }}
          VERSION: ${{ steps.version_step.outputs.semVer }}

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          body: ${{ steps.release-notes.outputs.content }}
          repository: ${{ github.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v${{ steps.version_step.outputs.semVer }}
          make_latest: true

  build:
    runs-on: gha-runner-scale-set
    needs:
      - prepare
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: "v2.2.4"

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          platforms: linux/amd64,linux/arm64
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{  env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{  env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.version }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

  chart-release:
    # depending on default permission settings for your org (contents being read-only or read-write for workloads), you will have to add permissions
    # see: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#modifying-the-permissions-for-the-github_token
    permissions:
      contents: write
    runs-on: gha-runner-scale-set
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.7.0
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
